服务器端：
	1. 新建一个ServerSocket，并绑定端口 new ServerSocket(port)
	2. 阻塞任务，接收请求，并处理请求，如果没有请求，会一直阻塞，如接收到请求，则获取一个socket
		socket = serverSocket.accept();
	3. 处理请求，首先要获取到输入输出流：
		socket.getInputStream()，可以通过IO装饰器来获得按行读取的能力，如BufferedReader
		socket.getOutputStream()，可以通过IO装饰器来获得按行写的能力，如PrintWriter
		一般服务器端是先获取输入流，，取得请求数据，再用输出流返回数据
		当然，也可以先输出，再输入，只输入，只输出，都可以
	4. 一般来讲，每接收到一个socket，都会新起一个线程，处理该次请求，避免阻塞后续的请求接入
	5. 由于创建线程需要较大的开销，并且无限制的创建线程可能导致系统资源不足，可以使用线程池来进行优化
客户端：
	1. 新建一个客户端的Socket，并建立连接，new Socket(host,port)
		当然和可以先不指定服务器，后续用connect方法建立连接
		连接是一个阻塞的操作，客户端会一直阻塞，直到超时处理(如有)
	2. 获取输入流和输出流，过程同上

其实对于一个连接时间不长的请求，感觉BIO也够用了，但是考虑到从接收请求到返回请求中间一些列处理的耗时，还是挺浪费时间的